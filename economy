const Discord = require('discord.js');
const sqlite3 = require('sqlite3').verbose();
require('dotenv').config();

// Create a new Discord client
const client = new Discord.Client();

// Connect to the SQLite database
const db = new sqlite3.Database('./database.sqlite');

// Event: Bot is ready
client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}`);
});

// Event: Message received
client.on('message', (message) => {
  // Check if the message starts with the command prefix
  if (!message.content.startsWith('!')) return;

  // Extract the command and arguments
  const [command, ...args] = message.content.slice(1).split(' ');

  // Handle different commands
  switch (command) {
    case 'balance':
      getBalance(message.author.id)
        .then((balance) => {
          message.reply(`Your current balance is ${balance} CR.`);
        })
        .catch((error) => {
          console.error('Error retrieving balance:', error);
          message.reply('An error occurred while retrieving your balance.');
        });
      break;

    case 'earn':
      const amount = parseInt(args[0]) || 0;
      if (amount <= 0) {
        message.reply('Please provide a valid amount to earn.');
        return;
      }

      updateBalance(message.author.id, amount)
        .then(() => {
          message.reply(`You earned ${amount} CR. Your new balance is updated.`);
        })
        .catch((error) => {
          console.error('Error updating balance:', error);
          message.reply('An error occurred while updating your balance.');
        });
      break;

    case 'spend':
      const spentAmount = parseInt(args[0]) || 0;
      if (spentAmount <= 0) {
        message.reply('Please provide a valid amount to spend.');
        return;
      }

      getBalance(message.author.id)
        .then((balance) => {
          if (balance < spentAmount) {
            message.reply('Insufficient funds.');
            return;
          }

          updateBalance(message.author.id, -spentAmount)
            .then(() => {
              message.reply(`You spent ${spentAmount} CR. Your new balance is updated.`);
            })
            .catch((error) => {
              console.error('Error updating balance:', error);
              message.reply('An error occurred while updating your balance.');
            });
        })
        .catch((error) => {
          console.error('Error retrieving balance:', error);
          message.reply('An error occurred while retrieving your balance.');
        });
      break;
  }
});

// Function: Get user balance from the database
function getBalance(userId) {
  return new Promise((resolve, reject) => {
    db.get('SELECT balance FROM users WHERE user_id = ?', userId, (err, row) => {
      if (err) {
        reject(err);
      } else {
        resolve(row ? row.balance : 0);
      }
    });
  });
}

// Function: Update user balance in the database
function updateBalance(userId, amount) {
  return new Promise((resolve, reject) => {
    db.run('INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)', userId, (err) => {
      if (err) {
        reject(err);
      } else {
        db.run('UPDATE users SET balance = balance + ? WHERE user_id = ?', amount, userId, (err) => {
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      }
    });
  });
}

// Connect the bot to Discord using your bot token
// Connect the bot to Discord using your bot token
client.login(process.env.DISCORD_BOT_TOKEN);
